//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.03 at 08:13:18 PM EDT 
//


package com.copyroute.cdm.rss;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="_id" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="pageTitle" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="searchType" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="category" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="items" type="{http://copyroute.com/cdm/rss}rssItem" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "id",
    "pageTitle",
    "searchType",
    "category",
    "items"
})
@XmlRootElement(name = "rssItemList")
public class RssItemList
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    @XmlElement(name = "_id", required = true)
    protected String id;
    @XmlElement(required = true)
    protected String pageTitle;
    @XmlElement(required = true)
    protected String searchType;
    @XmlElement(required = true)
    protected String category;
    protected List<RssItem> items;

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setId(String value) {
        this.id = value;
    }

    /**
     * Gets the value of the pageTitle property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPageTitle() {
        return pageTitle;
    }

    /**
     * Sets the value of the pageTitle property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPageTitle(String value) {
        this.pageTitle = value;
    }

    /**
     * Gets the value of the searchType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSearchType() {
        return searchType;
    }

    /**
     * Sets the value of the searchType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSearchType(String value) {
        this.searchType = value;
    }

    /**
     * Gets the value of the category property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCategory() {
        return category;
    }

    /**
     * Sets the value of the category property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCategory(String value) {
        this.category = value;
    }

    /**
     * Gets the value of the items property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the items property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getItems().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RssItem }
     * 
     * 
     */
    public List<RssItem> getItems() {
        if (items == null) {
            items = new ArrayList<RssItem>();
        }
        return this.items;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            String theId;
            theId = this.getId();
            strategy.appendField(locator, this, "id", buffer, theId);
        }
        {
            String thePageTitle;
            thePageTitle = this.getPageTitle();
            strategy.appendField(locator, this, "pageTitle", buffer, thePageTitle);
        }
        {
            String theSearchType;
            theSearchType = this.getSearchType();
            strategy.appendField(locator, this, "searchType", buffer, theSearchType);
        }
        {
            String theCategory;
            theCategory = this.getCategory();
            strategy.appendField(locator, this, "category", buffer, theCategory);
        }
        {
            List<RssItem> theItems;
            theItems = (((this.items!= null)&&(!this.items.isEmpty()))?this.getItems():null);
            strategy.appendField(locator, this, "items", buffer, theItems);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof RssItemList)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final RssItemList that = ((RssItemList) object);
        {
            String lhsId;
            lhsId = this.getId();
            String rhsId;
            rhsId = that.getId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                return false;
            }
        }
        {
            String lhsPageTitle;
            lhsPageTitle = this.getPageTitle();
            String rhsPageTitle;
            rhsPageTitle = that.getPageTitle();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "pageTitle", lhsPageTitle), LocatorUtils.property(thatLocator, "pageTitle", rhsPageTitle), lhsPageTitle, rhsPageTitle)) {
                return false;
            }
        }
        {
            String lhsSearchType;
            lhsSearchType = this.getSearchType();
            String rhsSearchType;
            rhsSearchType = that.getSearchType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "searchType", lhsSearchType), LocatorUtils.property(thatLocator, "searchType", rhsSearchType), lhsSearchType, rhsSearchType)) {
                return false;
            }
        }
        {
            String lhsCategory;
            lhsCategory = this.getCategory();
            String rhsCategory;
            rhsCategory = that.getCategory();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "category", lhsCategory), LocatorUtils.property(thatLocator, "category", rhsCategory), lhsCategory, rhsCategory)) {
                return false;
            }
        }
        {
            List<RssItem> lhsItems;
            lhsItems = (((this.items!= null)&&(!this.items.isEmpty()))?this.getItems():null);
            List<RssItem> rhsItems;
            rhsItems = (((that.items!= null)&&(!that.items.isEmpty()))?that.getItems():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "items", lhsItems), LocatorUtils.property(thatLocator, "items", rhsItems), lhsItems, rhsItems)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theId;
            theId = this.getId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
        }
        {
            String thePageTitle;
            thePageTitle = this.getPageTitle();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "pageTitle", thePageTitle), currentHashCode, thePageTitle);
        }
        {
            String theSearchType;
            theSearchType = this.getSearchType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "searchType", theSearchType), currentHashCode, theSearchType);
        }
        {
            String theCategory;
            theCategory = this.getCategory();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "category", theCategory), currentHashCode, theCategory);
        }
        {
            List<RssItem> theItems;
            theItems = (((this.items!= null)&&(!this.items.isEmpty()))?this.getItems():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "items", theItems), currentHashCode, theItems);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof RssItemList) {
            final RssItemList copy = ((RssItemList) draftCopy);
            if (this.id!= null) {
                String sourceId;
                sourceId = this.getId();
                String copyId = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceId), sourceId));
                copy.setId(copyId);
            } else {
                copy.id = null;
            }
            if (this.pageTitle!= null) {
                String sourcePageTitle;
                sourcePageTitle = this.getPageTitle();
                String copyPageTitle = ((String) strategy.copy(LocatorUtils.property(locator, "pageTitle", sourcePageTitle), sourcePageTitle));
                copy.setPageTitle(copyPageTitle);
            } else {
                copy.pageTitle = null;
            }
            if (this.searchType!= null) {
                String sourceSearchType;
                sourceSearchType = this.getSearchType();
                String copySearchType = ((String) strategy.copy(LocatorUtils.property(locator, "searchType", sourceSearchType), sourceSearchType));
                copy.setSearchType(copySearchType);
            } else {
                copy.searchType = null;
            }
            if (this.category!= null) {
                String sourceCategory;
                sourceCategory = this.getCategory();
                String copyCategory = ((String) strategy.copy(LocatorUtils.property(locator, "category", sourceCategory), sourceCategory));
                copy.setCategory(copyCategory);
            } else {
                copy.category = null;
            }
            if ((this.items!= null)&&(!this.items.isEmpty())) {
                List<RssItem> sourceItems;
                sourceItems = (((this.items!= null)&&(!this.items.isEmpty()))?this.getItems():null);
                @SuppressWarnings("unchecked")
                List<RssItem> copyItems = ((List<RssItem> ) strategy.copy(LocatorUtils.property(locator, "items", sourceItems), sourceItems));
                copy.items = null;
                if (copyItems!= null) {
                    List<RssItem> uniqueItemsl = copy.getItems();
                    uniqueItemsl.addAll(copyItems);
                }
            } else {
                copy.items = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new RssItemList();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        if (right instanceof RssItemList) {
            final RssItemList target = this;
            final RssItemList leftObject = ((RssItemList) left);
            final RssItemList rightObject = ((RssItemList) right);
            {
                String lhsId;
                lhsId = leftObject.getId();
                String rhsId;
                rhsId = rightObject.getId();
                String mergedId = ((String) strategy.merge(LocatorUtils.property(leftLocator, "id", lhsId), LocatorUtils.property(rightLocator, "id", rhsId), lhsId, rhsId));
                target.setId(mergedId);
            }
            {
                String lhsPageTitle;
                lhsPageTitle = leftObject.getPageTitle();
                String rhsPageTitle;
                rhsPageTitle = rightObject.getPageTitle();
                String mergedPageTitle = ((String) strategy.merge(LocatorUtils.property(leftLocator, "pageTitle", lhsPageTitle), LocatorUtils.property(rightLocator, "pageTitle", rhsPageTitle), lhsPageTitle, rhsPageTitle));
                target.setPageTitle(mergedPageTitle);
            }
            {
                String lhsSearchType;
                lhsSearchType = leftObject.getSearchType();
                String rhsSearchType;
                rhsSearchType = rightObject.getSearchType();
                String mergedSearchType = ((String) strategy.merge(LocatorUtils.property(leftLocator, "searchType", lhsSearchType), LocatorUtils.property(rightLocator, "searchType", rhsSearchType), lhsSearchType, rhsSearchType));
                target.setSearchType(mergedSearchType);
            }
            {
                String lhsCategory;
                lhsCategory = leftObject.getCategory();
                String rhsCategory;
                rhsCategory = rightObject.getCategory();
                String mergedCategory = ((String) strategy.merge(LocatorUtils.property(leftLocator, "category", lhsCategory), LocatorUtils.property(rightLocator, "category", rhsCategory), lhsCategory, rhsCategory));
                target.setCategory(mergedCategory);
            }
            {
                List<RssItem> lhsItems;
                lhsItems = (((leftObject.items!= null)&&(!leftObject.items.isEmpty()))?leftObject.getItems():null);
                List<RssItem> rhsItems;
                rhsItems = (((rightObject.items!= null)&&(!rightObject.items.isEmpty()))?rightObject.getItems():null);
                List<RssItem> mergedItems = ((List<RssItem> ) strategy.merge(LocatorUtils.property(leftLocator, "items", lhsItems), LocatorUtils.property(rightLocator, "items", rhsItems), lhsItems, rhsItems));
                target.items = null;
                if (mergedItems!= null) {
                    List<RssItem> uniqueItemsl = target.getItems();
                    uniqueItemsl.addAll(mergedItems);
                }
            }
        }
    }

}
