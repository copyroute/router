//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.06 at 05:08:11 PM EDT 
//


package com.copyroute.cdm.identity;

import java.io.Serializable;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for profile complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="profile">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="first" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="last" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="ssn" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="dob" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="location" type="{http://copyroute.com/cdm/identity}location"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "profile", propOrder = {
    "first",
    "last",
    "ssn",
    "dob",
    "location"
})
public class Profile
    implements Serializable, Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    @XmlElement(required = true)
    protected String first;
    @XmlElement(required = true)
    protected String last;
    @XmlElement(required = true)
    protected String ssn;
    @XmlElement(required = true)
    protected String dob;
    @XmlElement(required = true)
    protected Location location;

    /**
     * Gets the value of the first property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFirst() {
        return first;
    }

    /**
     * Sets the value of the first property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFirst(String value) {
        this.first = value;
    }

    /**
     * Gets the value of the last property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLast() {
        return last;
    }

    /**
     * Sets the value of the last property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLast(String value) {
        this.last = value;
    }

    /**
     * Gets the value of the ssn property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSsn() {
        return ssn;
    }

    /**
     * Sets the value of the ssn property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSsn(String value) {
        this.ssn = value;
    }

    /**
     * Gets the value of the dob property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDob() {
        return dob;
    }

    /**
     * Sets the value of the dob property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDob(String value) {
        this.dob = value;
    }

    /**
     * Gets the value of the location property.
     * 
     * @return
     *     possible object is
     *     {@link Location }
     *     
     */
    public Location getLocation() {
        return location;
    }

    /**
     * Sets the value of the location property.
     * 
     * @param value
     *     allowed object is
     *     {@link Location }
     *     
     */
    public void setLocation(Location value) {
        this.location = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            String theFirst;
            theFirst = this.getFirst();
            strategy.appendField(locator, this, "first", buffer, theFirst);
        }
        {
            String theLast;
            theLast = this.getLast();
            strategy.appendField(locator, this, "last", buffer, theLast);
        }
        {
            String theSsn;
            theSsn = this.getSsn();
            strategy.appendField(locator, this, "ssn", buffer, theSsn);
        }
        {
            String theDob;
            theDob = this.getDob();
            strategy.appendField(locator, this, "dob", buffer, theDob);
        }
        {
            Location theLocation;
            theLocation = this.getLocation();
            strategy.appendField(locator, this, "location", buffer, theLocation);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Profile)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Profile that = ((Profile) object);
        {
            String lhsFirst;
            lhsFirst = this.getFirst();
            String rhsFirst;
            rhsFirst = that.getFirst();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "first", lhsFirst), LocatorUtils.property(thatLocator, "first", rhsFirst), lhsFirst, rhsFirst)) {
                return false;
            }
        }
        {
            String lhsLast;
            lhsLast = this.getLast();
            String rhsLast;
            rhsLast = that.getLast();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "last", lhsLast), LocatorUtils.property(thatLocator, "last", rhsLast), lhsLast, rhsLast)) {
                return false;
            }
        }
        {
            String lhsSsn;
            lhsSsn = this.getSsn();
            String rhsSsn;
            rhsSsn = that.getSsn();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ssn", lhsSsn), LocatorUtils.property(thatLocator, "ssn", rhsSsn), lhsSsn, rhsSsn)) {
                return false;
            }
        }
        {
            String lhsDob;
            lhsDob = this.getDob();
            String rhsDob;
            rhsDob = that.getDob();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dob", lhsDob), LocatorUtils.property(thatLocator, "dob", rhsDob), lhsDob, rhsDob)) {
                return false;
            }
        }
        {
            Location lhsLocation;
            lhsLocation = this.getLocation();
            Location rhsLocation;
            rhsLocation = that.getLocation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "location", lhsLocation), LocatorUtils.property(thatLocator, "location", rhsLocation), lhsLocation, rhsLocation)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theFirst;
            theFirst = this.getFirst();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "first", theFirst), currentHashCode, theFirst);
        }
        {
            String theLast;
            theLast = this.getLast();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "last", theLast), currentHashCode, theLast);
        }
        {
            String theSsn;
            theSsn = this.getSsn();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ssn", theSsn), currentHashCode, theSsn);
        }
        {
            String theDob;
            theDob = this.getDob();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dob", theDob), currentHashCode, theDob);
        }
        {
            Location theLocation;
            theLocation = this.getLocation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "location", theLocation), currentHashCode, theLocation);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof Profile) {
            final Profile copy = ((Profile) draftCopy);
            if (this.first!= null) {
                String sourceFirst;
                sourceFirst = this.getFirst();
                String copyFirst = ((String) strategy.copy(LocatorUtils.property(locator, "first", sourceFirst), sourceFirst));
                copy.setFirst(copyFirst);
            } else {
                copy.first = null;
            }
            if (this.last!= null) {
                String sourceLast;
                sourceLast = this.getLast();
                String copyLast = ((String) strategy.copy(LocatorUtils.property(locator, "last", sourceLast), sourceLast));
                copy.setLast(copyLast);
            } else {
                copy.last = null;
            }
            if (this.ssn!= null) {
                String sourceSsn;
                sourceSsn = this.getSsn();
                String copySsn = ((String) strategy.copy(LocatorUtils.property(locator, "ssn", sourceSsn), sourceSsn));
                copy.setSsn(copySsn);
            } else {
                copy.ssn = null;
            }
            if (this.dob!= null) {
                String sourceDob;
                sourceDob = this.getDob();
                String copyDob = ((String) strategy.copy(LocatorUtils.property(locator, "dob", sourceDob), sourceDob));
                copy.setDob(copyDob);
            } else {
                copy.dob = null;
            }
            if (this.location!= null) {
                Location sourceLocation;
                sourceLocation = this.getLocation();
                Location copyLocation = ((Location) strategy.copy(LocatorUtils.property(locator, "location", sourceLocation), sourceLocation));
                copy.setLocation(copyLocation);
            } else {
                copy.location = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new Profile();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        if (right instanceof Profile) {
            final Profile target = this;
            final Profile leftObject = ((Profile) left);
            final Profile rightObject = ((Profile) right);
            {
                String lhsFirst;
                lhsFirst = leftObject.getFirst();
                String rhsFirst;
                rhsFirst = rightObject.getFirst();
                String mergedFirst = ((String) strategy.merge(LocatorUtils.property(leftLocator, "first", lhsFirst), LocatorUtils.property(rightLocator, "first", rhsFirst), lhsFirst, rhsFirst));
                target.setFirst(mergedFirst);
            }
            {
                String lhsLast;
                lhsLast = leftObject.getLast();
                String rhsLast;
                rhsLast = rightObject.getLast();
                String mergedLast = ((String) strategy.merge(LocatorUtils.property(leftLocator, "last", lhsLast), LocatorUtils.property(rightLocator, "last", rhsLast), lhsLast, rhsLast));
                target.setLast(mergedLast);
            }
            {
                String lhsSsn;
                lhsSsn = leftObject.getSsn();
                String rhsSsn;
                rhsSsn = rightObject.getSsn();
                String mergedSsn = ((String) strategy.merge(LocatorUtils.property(leftLocator, "ssn", lhsSsn), LocatorUtils.property(rightLocator, "ssn", rhsSsn), lhsSsn, rhsSsn));
                target.setSsn(mergedSsn);
            }
            {
                String lhsDob;
                lhsDob = leftObject.getDob();
                String rhsDob;
                rhsDob = rightObject.getDob();
                String mergedDob = ((String) strategy.merge(LocatorUtils.property(leftLocator, "dob", lhsDob), LocatorUtils.property(rightLocator, "dob", rhsDob), lhsDob, rhsDob));
                target.setDob(mergedDob);
            }
            {
                Location lhsLocation;
                lhsLocation = leftObject.getLocation();
                Location rhsLocation;
                rhsLocation = rightObject.getLocation();
                Location mergedLocation = ((Location) strategy.merge(LocatorUtils.property(leftLocator, "location", lhsLocation), LocatorUtils.property(rightLocator, "location", rhsLocation), lhsLocation, rhsLocation));
                target.setLocation(mergedLocation);
            }
        }
    }

}
